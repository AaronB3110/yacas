language: cpp

os:
  - linux
  - osx

dist: bionic
sudo: required

osx_image: xcode12.2

before_install:
  - if [ ${TRAVIS_OS_NAME} = "linux" ]; then sudo add-apt-repository --yes ppa:beineri/opt-qt-5.12.2-xenial; fi
  - if [ ${TRAVIS_OS_NAME} = "linux" ]; then sudo add-apt-repository --yes ppa:ubuntu-toolchain-r/test; fi
  - if [ ${TRAVIS_OS_NAME} = "linux" ]; then sudo apt-get -qq update; fi
  - if [ ${TRAVIS_OS_NAME} = "linux" ]; then sudo apt-get install -y gcc-8 g++-8; fi
  - if [ ${TRAVIS_OS_NAME} = "linux" ]; then sudo apt-get install -y libzmq3-dev libzmqpp-dev; fi
  - if [ ${TRAVIS_OS_NAME} = "linux" ]; then sudo apt-get install -y qt512webengine qt512webchannel qt512svg qt512base qt512location qt512tools libgl1-mesa-dev; fi
  - if [ ${TRAVIS_OS_NAME} = "linux" ]; then sudo apt-get install -y libboost-date-time-dev libjsoncpp-dev openssl; fi
  - if [ ${TRAVIS_OS_NAME} = "linux" ]; then sudo apt-get install -y lcov; fi
  - if [ ${TRAVIS_OS_NAME} = "linux" ]; then sudo apt-get install -y ant ant-optional junit; fi
  - if [ ${TRAVIS_OS_NAME} = "osx" ]; then brew update && brew install ant && brew install qt; fi

before_script:
  - if [ "${TRAVIS_OS_NAME}" = "linux" ]; then source /opt/qt512/bin/qt512-env.sh; fi
  - if [ "${TRAVIS_OS_NAME}" = "osx" ]; then unset CXX; unset CC; fi
  - if [ "${TRAVIS_OS_NAME}" = "linux" ]; then export CXX=g++-8; export CC=gcc-8; fi
  - git clone https://github.com/google/googletest.git
  - cd googletest
  - mkdir build && cd build
  - cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_CXX_STANDARD=17 -DCMAKE_CXX_STANDARD_REQUIRED=ON -DCMAKE_CXX_EXTENSIONS=OFF ..
  - if [ ${TRAVIS_OS_NAME} = "linux" ]; then sudo env "PATH=$PATH" cmake --build . --target install --config Release; fi
  - if [ ${TRAVIS_OS_NAME} = "osx" ]; then cmake --build . --target install --config Release; fi
  - cd ../..
  - git clone https://github.com/google/benchmark.git
  - cd benchmark
  - mkdir build && cd build
  - cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_CXX_STANDARD=17 -DCMAKE_CXX_STANDARD_REQUIRED=ON -DCMAKE_CXX_EXTENSIONS=OFF -DBENCHMARK_DOWNLOAD_DEPENDENCIES=On ..
  - if [ ${TRAVIS_OS_NAME} = "linux" ]; then sudo env "PATH=$PATH" cmake --build . --target install --config Release; fi
  - if [ ${TRAVIS_OS_NAME} = "osx" ]; then cmake --build . --target install --config Release; fi
  - cd ../..
  - mkdir cmake_build && cd cmake_build
  - if [ "${TRAVIS_OS_NAME}" = "linux" ]; then cmake -DENABLE_CYACAS_KERNEL=Off -DENABLE_CYACAS_UNIT_TESTS=On -DENABLE_CODE_COVERAGE=On .. ; fi
  - if [ "${TRAVIS_OS_NAME}" = "osx" ]; then cmake -G Xcode -DCMAKE_PREFIX_PATH=`brew --prefix qt` -DENABLE_CYACAS_KERNEL=Off .. ; fi

script:
  - if [ "${TRAVIS_OS_NAME}" = "linux" ]; then make ; fi
  - if [ "${TRAVIS_OS_NAME}" = "linux" ]; then make test ; fi
  - if [ "${TRAVIS_OS_NAME}" = "osx" ]; then travis_wait xcodebuild -project yacas.xcodeproj -target ALL_BUILD; fi
  - if [ "${TRAVIS_OS_NAME}" = "osx" ]; then xcodebuild -project yacas.xcodeproj -target RUN_TESTS; fi
  - if [ "${TRAVIS_OS_NAME}" = "osx" ]; then travis_wait xcodebuild -project yacas.xcodeproj -configuration Release -target ALL_BUILD; fi
  - if [ "${TRAVIS_OS_NAME}" = "osx" ]; then xcodebuild -project yacas.xcodeproj -configuration Release -target RUN_TESTS; fi
  - cd .. && ant && ant test

after_success:
  - cd cmake_build
  - if [ "${TRAVIS_OS_NAME}" = "linux" ]; then wget https://github.com/linux-test-project/lcov/archive/v1.14.zip ; fi
  - if [ "${TRAVIS_OS_NAME}" = "linux" ]; then unzip v1.14.zip ; fi
  - if [ "${TRAVIS_OS_NAME}" = "linux" ]; then LCOV="`pwd`/lcov-1.14/bin/lcov" ; fi
  - if [ "${TRAVIS_OS_NAME}" = "linux" ]; then $LCOV --gcov-tool /usr/bin/gcov-8 --directory . --capture --output-file coverage.info ; fi
  - if [ "${TRAVIS_OS_NAME}" = "linux" ]; then $LCOV --gcov-tool /usr/bin/gcov-8 --remove coverage.info '/usr/*' "${HOME}"'/.cache/*' --output-file coverage.info ; fi
  - if [ "${TRAVIS_OS_NAME}" = "linux" ]; then $LCOV --gcov-tool /usr/bin/gcov-8 --list coverage.info ; fi
  - if [ "${TRAVIS_OS_NAME}" = "linux" ]; then bash <(curl -s https://codecov.io/bash) -f coverage.info || echo "Codecov did not collect coverage reports" ; fi

branches:
  except:
    - gh_pages
    - vendor
    - bignum_experiments
    - coverity_scan
