Graph(edges_IsList) <-- [
    Local(v, e, f, t);

    vertices := {};

    ForEach (e, edges) [
        If (IsList(e), e := Head(e));
        {f, t} := Tail(Listify(e));

        DestructiveAppend(vertices, f);
        DestructiveAppend(vertices, t);
    ];

    Graph(RemoveDuplicates(vertices), edges);
];

10 # IsGraph(Graph(vertices_IsList, edges_IsList)) <-- True;
20 # IsGraph(_x) <-- False;

Edges(Graph(vertices_IsList, edges_IsList)) <-- edges;
Vertices(Graph(vertices_IsList, edges_IsList)) <-- vertices;

AdjacencyList(g_IsGraph) <-- [
    Local(l, edges, e, op, f, t, tl);

    l := Association'Create();

    edges := Edges(g);

    ForEach(e, edges) [
        If (IsList(e), e := Head(e));
        {op, f, t} := Listify(e);
        tl := Association'Get(l, f);
        If (tl = Undefined, [
            tl := {};
            Association'Set(l, f, tl);
        ]);
        DestructiveAppend(tl, t);

        If (String(op) = "<->", [
            tl := Association'Get(l, t);
            If (tl = Undefined, [
                tl := {};
                Association'Set(l, t, tl);
            ]);
            DestructiveAppend(tl, f);
        ]);
    ];

    l;
];

AdjacencyMatrix(g_IsGraph) <-- [
    Local(vertices, adjacent, n, I, A, v, a, i, j);

    vertices := Vertices(g);

    n := Length(vertices);

    I := Association'Create();
    For (i := 1, i <= n, i++)
        Association'Set(I, vertices[i], i);

    L := AdjacencyList(g);
    A := ZeroMatrix(n, n);

    ForEach (v, vertices) [
        i := Association'Get(I, v);
        adjacent := Association'Get(L, v);
        ForEach (a, adjacent) [
            j := Association'Get(I, a);
            A[i][j] := 1;
        ];
    ];

    A;
];

LocalSymbols(graph, start, func) [
    RuleBase("DFS", {graph, start, func});
    RuleBase("DFS", {graph, func});

    DFS(g_IsGraph, _start, _func) <-- [
        Local(vertices, edges, n, A, S, m, f, t, v, a, r);

        vertices := Vertices(g);
        edges := Edges(g);

        n := Length(vertices);

        A := FillList({}, n);
        ForEach (e, edges) [
            If (IsList(e), e := Head(e));
            {f, t} := Tail(Listify(e));

            f := Find(vertices, f);
            t := Find(vertices, t);

            DestructiveAppend(A[f], t);
        ];

        m := FillList(False, n);

        r := {};

        S := {};

        v := Find(vertices, start);

        Check(v > 0, "DFS: start vertex does not exist");

        S := Push(S, v);

        While (S != {}) [
            v := PopFront(S);

            If (Not m[v], [
                DestructiveAppend(r, Apply(func, {vertices[v]}));
                m[v] := True;
                ForEach (a, A[v])
                    S := Push(S, a);
            ]);
        ];

        r;
    ];

    DFS(g_IsGraph, _func)_(Vertices(g) != {}) <-- DFS(g, Vertices(g)[1], func);

    DFS(g_IsGraph, _func)_(Vertices(g) = {}) <-- {};

    HoldArgNr("DFS", func);
];

TopologicalSort(A_IsSquareMatrix) <--
[
    Local(mark, n, L, visit);

    mark := ZeroVector(Length(A));
    L := {};

    dfs(A, n, mark, L) := [
        Check(mark[n] != 1, "TopologicalSort: cycle detected");
        If (mark[n] = 0, [
            Local(m, row);
            DestructiveReplace(mark, n, 1);
            row := A[n];
            For (m := 1, m <= Length(row), m++)
                If (row[m] != 0, dfs(A, m, mark, L));
            DestructiveReplace(mark, n, 2);
            DestructiveInsert(L, 1, n);
        ]);
    ];    

    n := Find(mark, 0);

    While (n > 0) [
        dfs(A, n, mark, L);
        n := Find(mark, 0);
    ];

    L;
];
